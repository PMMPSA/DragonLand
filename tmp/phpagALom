name: VoteReward
main: KhoaGaming123\VoteReward\Main
version: 1.0
api: [2.0.0, 3.0.0]
author: KhoaGaming123
load: POSTWORLD
commands:
  vote:
    usage: "/vote"
    description: "Kiểm tra xem bạn đã vote trên trang web danh sách server chưa"
    permission: votereward.command.vote
permissions:
  votereward:
    default: false
    description: "Cho phép tất cả truy cập tính năng."
    children:
      votereward.command:
        default: false
        description: "Cho phép tất cả sử dụng lệnh của votereward."
        children:
          votereward.command.vote:
            default: true
            description: "Cho phép tất cả sử dụng lệnh vote."
          votereward.command.reload:
            default: op
            description: "Cho phép tất cả sử dụng lệnh phụ reload."<?php

namespace KhoaGaming123\VoteReward;

use pocketmine\command\Command;
use pocketmine\command\CommandSender;
use pocketmine\command\ConsoleCommandSender;
use pocketmine\Player;
use pocketmine\plugin\PluginBase;
use pocketmine\item\Item;

class Main extends PluginBase {

  private $message = "";
  private $items = [];
  private $commands = [];
  private $debug = false;
  public $queue = [];

  public function onLoad() {
    if(file_exists($this->getDataFolder() . "config.yml")) {
      $c = $this->getConfig()->getAll();
      if(isset($c["API-Key"])) {
        if(trim($c["API-Key"]) != "") {
          if(!is_dir($this->getDataFolder() . "Danh_sach/")) {
            mkdir($this->getDataFolder() . "Danh_sach/");
          }
          file_put_contents($this->getDataFolder() . "Danh_sach/minecraftpocket-servers.com.vrc", "{\"website\":\"http://minecraftpocket-servers.com/\",\"check\":\"http://minecraftpocket-servers.com/api-vrc/?object=votes&element=claim&key=" . $c["API-Key"] . "&username={USERNAME}\",\"claim\":\"http://minecraftpocket-servers.com/api-vrc/?action=post&object=votes&element=claim&key=" . $c["API-Key"] . "&username={USERNAME}\"}");
          rename($this->getDataFolder() . "config.yml", $this->getDataFolder() . "config.old.yml");
          $this->getLogger()->info("§eConverting API key to VRC file...");
        } else {
          rename($this->getDataFolder() . "config.yml", $this->getDataFolder() . "config.old.yml");
          $this->getLogger()->info("§eSetting up new configuration file...");
        }
      }
    }
  }

  public function onEnable() {
    $this->reload();
  }

  public function reload() {
    $this->saveDefaultConfig();
    if(!is_dir($this->getDataFolder() . "Danh_sach/")) {
      mkdir($this->getDataFolder() . "Danh_sach/");
    }
    $this->lists = [];
    foreach(scandir($this->getDataFolder() . "Danh_sach/") as $file) {
      $ext = explode(".", $file);
      $ext = (count($ext) > 1 && isset($ext[count($ext) - 1]) ? strtolower($ext[count($ext) - 1]) : "");
      if($ext == "vrc") {
        $this->lists[] = json_decode(file_get_contents($this->getDataFolder() . "Danh_sach/$file"),true);
      }
    }
    $this->reloadConfig();
    $config = $this->getConfig()->getAll();
    $this->message = $config["Message"];
    $this->items = [];
    foreach($config["Items"] as $i) {
      $r = explode(":", $i);
      $this->items[] = new Item($r[0], $r[1], $r[2]);
    }
    $this->commands = $config["Commands"];
    $this->debug = isset($config["Debug"]) && $config["Debug"] === true ? true : false;
  }

  public function onCommand(CommandSender $sender, Command $command, $label, array $args) {
    switch(strtolower($command->getName())) {
      case "vote":
        if(isset($args[0]) && strtolower($args[0]) == "reload") {
          if(Utils::hasPermission($sender, "votereward.command.reload")) {
            $this->reload();
            $sender->sendMessage("§b→ §aTất cả cấu hình đã được tải lại.");
            break;
          }
          $sender->sendMessage("§b→ §cBan không có quyền sử dụng lệnh này.");
          break;
        }
        if(!$sender instanceof Player) {
          $sender->sendMessage("§b→ §ebạn phải sử dụng lệnh này trong trò chơi.");
          break;
        }
        if(!Utils::hasPermission($sender, "votereward.command.vote")) {
          $sender->sendMessage("§b→§c Bạn không có quyền sử dụng lệnh này.");
          break;
        }
        if(in_array(strtolower($sender->getName()), $this->queue)) {
          $sender->sendMessage("§b→§e Chậm lại! Chúng tôi đã kiểm tra danh sách cho bạn.");
          break;
        }
        $this->queue[] = strtolower($sender->getName());
        $requests = [];
        foreach($this->lists as $list) {
          if(isset($list["check"]) && isset($list["claim"])) {
            $requests[] = new ServerListQuery($list["check"], $list["claim"]);
          }
        }
        $query = new RequestThread(strtolower($sender->getName()), $requests);
        $this->getServer()->getScheduler()->scheduleAsyncTask($query);
        break;
      default:
        $sender->sendMessage("§b→ §cLệnh không chính xác.");
        break;
    }
    return true;
  }

  public function rewardPlayer($player, $multiplier) {
    if(!$player instanceof Player) {
      return;
    }
    if($multiplier < 1) {
      $player->sendMessage("§b→ §eBạn chưa vote trên trang web danh sách server!");
      return;
    }
    $clones = [];
    foreach($this->items as $item) {
      $clones[] = clone $item;
    }
    foreach($clones as $item) {
      $item->setCount($item->getCount() * $multiplier);
      $player->getInventory()->addItem($item);
    }
    foreach($this->commands as $command) {
      $this->getServer()->dispatchCommand(new ConsoleCommandSender, str_replace(array(
        "{USERNAME}",
        "{NICKNAME}",
        "{X}",
        "{Y}",
        "{Y1}",
        "{Z}"
      ), array(
        $player->getName(),
        $player->getDisplayName(),
        $player->getX(),
        $player->getY(),
        $player->getY() + 1,
        $player->getZ()
      ), Utils::translateColors($command)));
    }
    if(trim($this->message) != "") {
      $message = str_replace(array(
        "{USERNAME}",
        "{NICKNAME}"
      ), array(
        $player->getName(),
        $player->getDisplayName()
      ), Utils::translateColors($this->message));
      foreach($this->getServer()->getOnlinePlayers() as $p) {
        $p->sendMessage($message);
      }
      $this->getServer()->getLogger()->info($message);
    }
    $player->sendMessage("§b→ §aBạn đã vote trên $multiplier danh sách server" . ($multiplier == 1 ? "" : "s") . "!");
  }

}# Config file for VoteReward by KhoaGaming123.
#
# Official VoteReward Server List Directory:
# http://votereward.mcpe.me/?p=lists
#
# Config Variables:
#   {USERNAME} ... The username of the player who voted. ....... Commands and message.
#   {NICKNAME} ... The display name of the player who voted. ... Commands and message.
#   {X} .......... The X coordinate of the player. ............. Commands only.
#   {Y} .......... The Y coordinate of the player. ............. Commands only.
#   {Y1} ......... The Y coordinate of the player plus 1. ...... Commands only.
#   {Z} .......... The Z coordinate of the player. ............. Commands only.

# EssentialsPE style color codes can be used in the message and commands.

# Message to broadcast to the server when a player votes.
Message: "&b→ &d{NICKNAME}&b đã vote bằng lệnh &e/vote&b và nhận được thưởng!"

# List of items to give players when they vote. Format: ID:Damage:Amount
Items:
  - "264:0:5"
  - "265:0:10"
  - "364:0:8"

# List of commands to execute when a player votes.
Commands:
  - "effect {USERNAME} 1 600 2"
  - "givemoney {USERNAME} 1000"
<?php

namespace KhoaGaming123\VoteReward;

class Utils {

  public static function hasPermission($player, $permission) {
    $base = "";
    $nodes = explode(".", $permission);
    foreach($nodes as $key => $node) {
      $seperator = $key == 0 ? "" : ".";
      $base = "$base$seperator$node";
      if($player->hasPermission($base)) {
        return true;
      }
    }
    return false;
  }

  public static function translateColors($string) {
    $message = preg_replace_callback("/(\\\&|\&)[0-9a-fk-or]/", function($matches) {
      return str_replace("§r", "§r§f", str_replace("\\§", "&", str_replace("&", "§", $matches[0])));
    }, $string);
    return $message;
  }

  public static function getURL($url) {
    $query = curl_init($url);
    curl_setopt($query, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($query, CURLOPT_SSL_VERIFYHOST, 2);
    curl_setopt($query, CURLOPT_FORBID_REUSE, 1);
    curl_setopt($query, CURLOPT_FRESH_CONNECT, 1);
    curl_setopt($query, CURLOPT_AUTOREFERER, true);
    curl_setopt($query, CURLOPT_FOLLOWLOCATION, true);
    curl_setopt($query, CURLOPT_HTTPHEADER, array("User-Agent: VoteReward"));
    curl_setopt($query, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($query, CURLOPT_TIMEOUT, 5);
    $return = curl_exec($query);
    curl_close($query);
    return $return;
  }

}<?php

namespace KhoaGaming123\VoteReward;

class ServerListQuery {

  private $status = [];

  public function __construct($check, $claim) {
    $this->status = ["check" => ["url" => $check, "code" => 0], "claim" => ["url" => $claim, "code" => 0]];
  }

  public function getCheckURL() {
    return $this->status["check"]["url"];
  }
  
  public function getClaimURL() {
    return $this->status["claim"]["url"];
  }

  public function setVoted($value) {
    return $this->status["check"]["code"] = $value;
  }

  public function hasVoted() {
    return $this->status["check"]["code"] == 1;
  }

  public function setClaimed($value) {
    return $this->status["claim"]["code"] = $value;
  }

  public function hasClaimed() {
    return $this->status["claim"]["code"] == 1;
  }

}
<?php

namespace KhoaGaming123\VoteReward;

use pocketmine\Server;
use pocketmine\scheduler\AsyncTask;

class RequestThread extends AsyncTask {

  private $queries;
  private $rewards;

  public function __construct($id, $queries) {
    $this->id = $id;
    $this->queries = $queries;
  }

  public function onRun() {
    foreach($this->queries as $query) {
      if(($return = Utils::getURL(str_replace("{USERNAME}", urlencode($this->id), $query->getCheckURL()))) != false && is_array(($return = json_decode($return, true))) && isset($return["voted"]) && is_bool($return["voted"]) && isset($return["claimed"]) && is_bool($return["claimed"])) {
        $query->setVoted($return["voted"] ? 1 : -1);
        $query->setClaimed($return["claimed"] ? 1 : -1);
        if($query->hasVoted() && !$query->hasClaimed()) {
          if(($return = Utils::getURL(str_replace("{USERNAME}", urlencode($this->id), $query->getClaimURL()))) != false && is_array(($return = json_decode($return, true))) && isset($return["voted"]) && is_bool($return["voted"]) && isset($return["claimed"]) && is_bool($return["claimed"])) {
            $query->setVoted($return["voted"] ? 1 : -1);
            $query->setClaimed($return["claimed"] ? 1 : -1);
            if($query->hasVoted() && $query->hasClaimed()) {
              $this->rewards++;
            }
          } else {
            $this->error = "Error sending claim data for \"" . $this->id . "\" to \"" . str_replace("{USERNAME}", urlencode($this->id), $query->getClaimURL()) . "\". Invalid VRC file or bad Internet connection.";
            $query->setVoted(-1);
            $query->setClaimed(-1);
          }
        }
      } else {
        $this->error = "Error fetching vote data for \"" . $this->id . "\" from \"" . str_replace("{USERNAME}", urlencode($this->id), $query->getCheckURL()) . "\". Invalid VRC file or bad Internet connection.";
        $query->setVoted(-1);
        $query->setClaimed(-1);
      }
    }
  }

  public function onCompletion(Server $server) {
    if(isset($this->error)) {
      $server->getPluginManager()->getPlugin("VoteReward")->getLogger()->error($this->error);
    }
    $server->getPluginManager()->getPlugin("VoteReward")->rewardPlayer($server->getPlayerExact($this->id), $this->rewards);
    array_splice($server->getPluginManager()->getPlugin("VoteReward")->queue, array_search($this->id, $server->getPluginManager()->getPlugin("VoteReward")->queue, true), 1);
  }

}
